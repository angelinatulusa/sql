--FootballPlayersController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YourAppName.Models;

[Route("api/[controller]")]
[ApiController]
public class FootballPlayersController : ControllerBase
{
    private readonly ApplicationDbContext _context;

    public FootballPlayersController(ApplicationDbContext context)
    {
        _context = context;
    }

    // GET: api/FootballPlayers
    [HttpGet]
    public async Task<ActionResult<IEnumerable<FootballPlayer>>> GetFootballPlayers()
    {
        return await _context.FootballPlayers.ToListAsync();
    }

    // GET: api/FootballPlayers/5
    [HttpGet("{id}")]
    public async Task<ActionResult<FootballPlayer>> GetFootballPlayer(int id)
    {
        var footballPlayer = await _context.FootballPlayers.FindAsync(id);

        if (footballPlayer == null)
        {
            return NotFound();
        }

        return footballPlayer;
    }

    // POST: api/FootballPlayers
    [HttpPost]
    public async Task<ActionResult<FootballPlayer>> PostFootballPlayer(FootballPlayer footballPlayer)
    {
        _context.FootballPlayers.Add(footballPlayer);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetFootballPlayer), new { id = footballPlayer.PlayerId }, footballPlayer);
    }

    // PUT: api/FootballPlayers/5
    [HttpPut("{id}")]
    public async Task<IActionResult> PutFootballPlayer(int id, FootballPlayer footballPlayer)
    {
        if (id != footballPlayer.PlayerId)
        {
            return BadRequest();
        }

        _context.Entry(footballPlayer).State = EntityState.Modified;

        await _context.SaveChangesAsync();

        return NoContent();
    }

    // DELETE: api/FootballPlayers/5
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteFootballPlayer(int id)
    {
        var footballPlayer = await _context.FootballPlayers.FindAsync(id);

        if (footballPlayer == null)
        {
            return NotFound();
        }

        _context.FootballPlayers.Remove(footballPlayer);
        await _context.SaveChangesAsync();

        return NoContent();
    }
}

--TeamsController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using YourAppName.Models;

[Route("api/[controller]")]
[ApiController]
public class TeamsController : ControllerBase
{
    private readonly ApplicationDbContext _context;

    public TeamsController(ApplicationDbContext context)
    {
        _context = context;
    }

    // GET: api/Teams
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Team>>> GetTeams()
    {
        return await _context.Teams.ToListAsync();
    }

    // GET: api/Teams/5
    [HttpGet("{id}")]
    public async Task<ActionResult<Team>> GetTeam(int id)
    {
        var team = await _context.Teams.FindAsync(id);

        if (team == null)
        {
            return NotFound();
        }

        return team;
    }

    // POST: api/Teams
    [HttpPost]
    public async Task<ActionResult<Team>> PostTeam(Team team)
    {
        _context.Teams.Add(team);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetTeam), new { id = team.TeamId }, team);
    }

    // PUT: api/Teams/5
    [HttpPut("{id}")]
    public async Task<IActionResult> PutTeam(int id, Team team)
    {
        if (id != team.TeamId)
        {
            return BadRequest();
        }

        _context.Entry(team).State = EntityState.Modified;

        await _context.SaveChangesAsync();

        return NoContent();
    }

    // DELETE: api/Teams/5
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteTeam(int id)
    {
        var team = await _context.Teams.FindAsync(id);

        if (team == null)
        {
            return NotFound();
        }

        _context.Teams.Remove(team);
        await _context.SaveChangesAsync();

        return NoContent();
    }
}
